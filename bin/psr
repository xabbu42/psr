#!/usr/bin/env perl

=head1 NAME

psr - perl surfraw

=head1 SYNOPSIS

psr [options] [provider] [query]

=head1 OPTIONS

 -h, --help            brief help message
 -f, --first, --lucky  open first result (same as --open 1)
 -a, --all             open all results (same as --open 1-)
 -o, --open=RANGES     open this results (example "1-4,5,9-")
 -u, --url             print url(s) instead of opening browser
 -n, --num=NUM         number of results to get
 -l, --list            list results (same as --all --url)
 -p, --providers       list known search providers
 --browser=CMD         use CMD to open a new browser
 -t, --tabs            open all urls with one browser command 
 -w, --windows         open each url with seperate browser command

=head1 DESCRIPTION

B<This program> is a perl replacement of surfraw. It generates search
urls and opens the url in a browser. You can optionally list the
results in your terminal or open the first result directly. 

psr tries to use the default browser on most systems. You can
overwrite the used browser command by setting the environment variable
BROWSER or by giving an explicit browser argument.

=cut

use Web::Scraper;
use URI;
use URI::QueryParam;

my %config = (
	'google|g' => {
		url => 'http://www.google.com/search',
		params => {'q' => '$query', num => '$numresults'},
		results => scraper {process 'p > a', '[]' => sub {
			my $url = $_[0]->attr('href');
			my $q = URI->new($url)->query_param('q');
			return $q =~ m[^http://] ? $q : undef;
		}},
	},
	'man|m' => {
		url => 'http://localhost/cgi-bin/man/man2html',
		params => {query => '$query'},
		results => scraper {process 'ul > li > a', '[]' => '@href'},
	},
	'cpan|c' => {
		url => 'http://search.cpan.org/search?mode=all&query=$query',
		params => {query => '$query', pagesize => '$numresults'},
		results => scraper {process 'h2 > a', '[]' => '@href'},
	},
	'dwww|d' => {
		url => 'http://localhost/cgi-bin/dwww',
		params => {search => '$query'},
		results => scraper {process 'table.wide > tr > td > a', '[]' => '@href'}
	},
	);

use strict;
use warnings;

use 5.010;

use Getopt::Long;
use Pod::Usage;
use IO::All;
use IO::All::LWP;
use List::Util qw/first max/;
use Browser::Open qw/open_browser_cmd/;

my %opts;
%opts = ('windows' => 0, 'tabs' => sub {$opts{windows} = 0});
Getopt::Long::Configure('gnu_getopt');
GetOptions(
	\%opts,
	'help|h', 'first|lucky|f', 'url|u', 'list|l', 'num|n=i',
	'providers|p', 'browser=s', 'all|a', "open|o:s",
	'windows|window|w', 'tabs|tab|t',
	) or pod2usage(2);
pod2usage(1) if $opts{help};
delete $opts{tabs};

if ($opts{providers}) {
	say sprintf("%-10s", $_), $config{$_}{url} foreach keys %config;
	exit(0);
}

if ($opts{list}) {
	$opts{url} = 1;
	$opts{open} = $opts{open} || "1-";
	delete $opts{list};
}

if ($opts{all}) {
	$opts{open} = "1-";
} elsif ($opts{first}) {
	$opts{open} = "1";
}
delete $opts{$_} foreach qw/list all first/;

if (!$opts{num}) {
	if ($opts{open} && $opts{open} !~ /-$|-,/) {
		my @nums = ($opts{open} =~ /(\d+)/g);
		$opts{num} = max @nums;
	} else {
		$opts{num} = 10;
	}
}

my $method = shift;
my $query = join ' ', @ARGV;
my $mconf = $config{ first { ($method =~ /^($_)$/) } keys %config };
die "Unknown method '$method'" unless $mconf;
die "No query given" unless $query;

my @urls = make_url($mconf, \%opts);
if (defined $opts{open}) {
	my @all = get_results($mconf, $urls[0], $opts{num});
	@urls = ();
	my $total = scalar @all;
	foreach (split ",", $opts{open}) {
		if (/(\d*)-(\d*)/) {
			my $first = ($1 || 1) - 1;
			my $last  = ($2 || $total) - 1;
			push @urls, @all[$first..$last];
		} elsif(/(\d+)/) {
			push @urls, $all[$1-1];
		} else {
			die "Illegal range '$_'";
		}
	}
	@urls = grep {$_} @urls;
}

if ($opts{url}) {
	say $_ foreach @urls;
} else {
	my $cmd = $opts{browser} || open_browser_cmd();
	if ($opts{windows}) {
		system($cmd, $_) foreach @urls;
	} else {
		system($cmd, @urls);
	}
}

sub make_url { 
	my ($mconf, $opts) = @_;
	my $url = URI->new($mconf->{url});
	my $numresults = $opts->{num};
	my %params;
	foreach my $key (keys %{$mconf->{params}}) {
		no warnings 'uninitialized';
		my $val = eval '"' . $mconf->{params}{$key} . '"';
		$params{$key} = $val if $val;
	}
	$url->query_form(\%params);
	return $url;
}

sub get_results {
	my ($mconf, $url, $num) = @_;
	my $html < io($url)->ua(agent => 'Mozilla/4.0');
	my $res = $mconf->{results}->scrape($html, $url);
	return $url unless $res->{''};
	my @defined = grep {$_} @{$res->{''}};
	warn "Not enough results!" if @defined < $num;
	return $num ? @defined[0..($num-1)] : @defined;
}

